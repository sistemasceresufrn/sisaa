#-*- coding:utf-8 -*-
from google.appengine.ext import webapp
import jinja2, os, util, re
from modelo import *


jinja_env = jinja2.Environment(
    loader = jinja2.FileSystemLoader(os.path.dirname(__file__) + '/templates/'),
    extensions=['jinja2.ext.autoescape'],
    autoescape=True)

class BaseHandler(webapp.RequestHandler):
    '''Handler que serve como base para os outros extenderem.'''
    
    def erro_404(self):
        self.responder('erro_404.html')
    
    def requer_permissao(self, credencial):
        '''Exibe a página que diz que o usuário não tem permissão para fazer algo.'''
        self.responder('req_permissao.html', {'credencial' : credencial})
    
    @property
    def usuario(self):
        return self.request.user
    
    def responder(self, pagina, valores=dict()):
        '''Exibe uma página para o usuário.
        Apenas chama:
            self.response.out.write(jinja_env.get_template(pagina).render(valores))
        :param pagina:
            String dizendo o nome da página a ser renderizada.
        :param valores:
            Dicionário contendo os valores a serem renderizados na página.
        '''
        self.response.out.write(jinja_env.get_template(pagina).render(valores))

class EntrouHandler(BaseHandler):
#    @login_required
    def get(self):
        user = self.request.user if self.request.user else None
        self.responder('entrou.html', dict(usuario = user.email,
            admin_checked = 'checked' if user.adm_flag else '',
            aluno_checked = 'checked' if user.alu_flag else '',
            aval_checked = 'checked' if user.ava_flag else '',
            org_checked = 'checked' if user.org_flag else '',))
    
#    @login_required
    def post(self):
        admin = self.request.get('admin') == 'on' # on é a constante passada pelo html
        aluno = self.request.get('aluno') == 'on'
        aval = self.request.get('aval') == 'on'
        org = self.request.get('org') == 'on'
        
        self.request.user.adm_flag = admin
        self.request.user.ava_flag = aval
        self.request.user.alu_flag = aluno
        self.request.user.org_flag = org
        
        self.request.user.put()
        
        self.redirect('/entrou')

class LoginHandler(BaseHandler):
    '''Handler que faz login'''
    def get(self):
        

class LogoutHandler(BaseHandler):
    '''Handler que faz logout.'''
    
    def logout(self):
        '''Desloga o usuário do sistema deletando o cookie de autenticação.'''
        self.response.out.write("Clicou em logout")

    def get(self):
        self.logout()
        self.redirect('/saiu')

class InicioHandler(BaseHandler):
    '''Trata as requisições da página inicial'''
    
    def get(self):
        self.responder('inicio.html')
    
    def post(self):
        self.redirect('/entrou')

class AdminHandler(BaseHandler):
    '''Handler para testes'''
#    @adm_required
    def get(self):
        self.responder('admin.html')
        
class AvalHandler(BaseHandler):
    '''Handler para testes'''
#    @ava_required
    def get(self):
        self.responder('aval.html')

class AlunoHandler(BaseHandler):
    '''Handler para testes'''
#    @alu_required
    def get(self):
        self.responder('aluno.html')

class OrgHandler(BaseHandler):
    '''Handler que gerencia organizadores.'''
#    @org_required
    def teste(self):
        self.responder('org.html')
    
#    @adm_required
    def get(self):
        self.responder('cad_org.html')
    
#    @adm_required
    def post(self):
        self.validar_campos()
        nome = self.request.get('nome').strip()
        email = self.request.get('email').strip()
        org = User(auth_ids = [u'password:'+email], nome = nome, email = email, org_flag = True)
        org.put()
        self.redirect('/entrou')
        
    def validar_campos(self):
        '''Valida os campos do formulário de cadastro de Organizador.'''
        assert isinstance(self.request, webapp.Request), 'Requisição inválida.'
        campos = ['nome','email']
        for i in campos:
            campo = self.request.get(i).strip()
            assert campo, 'Campo obrigatório não preenchido.'
        # TODO: validar email
        # email = self.request.get('email')
        # assert re.match('[^@]+@[^@]+\.[^@]+', email), 'E-mail inválido'

class SaiuHandler(BaseHandler):
    def get(self):
        self.responder('saiu.html')

class GTHandler(BaseHandler):
    '''Handler que cadastra grupos de trabalho'''
    
#    @org_required
    def get(self):
        self.responder('cad_gt.html')
    
#    @org_required
    def post(self):
        self.validar_campos()
        
        nome = self.request.get('nome').strip() # strip retira espaços em branco ao redor da string.
                                                # é o equivalente ao trim() do java.
        sigla = self.request.get('sigla').strip()
        # TODO: ver como cadastrar edital
        # converte as strings de data vindas da tela para objetos datetime
        ini_sub = util.str_para_date(self.request.get('ini_sub'))
        fim_sub = util.str_para_date(self.request.get('fim_sub'))
        ini_ava = util.str_para_date(self.request.get('ini_ava'))
        fim_ava = util.str_para_date(self.request.get('fim_ava'))
        org = self.usuario.email 
        emails_ava = self.request.get('emails_ava')
        emails_ava = emails_ava.split('\r\n') # quebrando os emails dos avaliadores em uma lista
        for i in range(len(emails_ava)):
            emails_ava[i] = emails_ava[i].strip()
            if emails_ava[i]: # cadastrando avaliadores
                #TODO: cadastrar avaliadores
                a = User._get_or_create(auth_ids = [u'password:' + emails_ava[i]], email = emails_ava[i], ava_flag = True)
                a.put()
            if not emails_ava[i]: # retirando strings vazias
                del emails_ava[i]
        
        # cria o grupo e guarda no banco
        gt = GrupoDeTrabalho(nome = nome, sigla = sigla, ini_sub = ini_sub,
            fim_sub = fim_sub, ini_ava = ini_ava, fim_ava = fim_ava,
            organizador = org, avaliadores = emails_ava)
        gt.put()
        
        self.redirect('/entrou')
    
    def validar_campos(self):
        '''Valida os campos do formulário de cadastro de GT.'''
        assert isinstance(self.request, webapp.Request), 'Requisição inválida.'
        # validação dos campos obrigatórios
        campos = ['nome','sigla','ini_sub','fim_sub','ini_ava','fim_ava', 'emails_ava']
        for i in campos:
            campo = self.request.get(i).strip()
            assert campo, 'Campo obrigatório não preenchido.'
        # TODO: validar emails
        # for e in self.request.get('emails_ava'):
        #    assert re.match('\w', e), 'E-mail inválido'
    
    def listar(self):
        '''Lista todos os grupos de trabalho para o usuário.'''
        grupos = GrupoDeTrabalho.query(GrupoDeTrabalho.organizador == self.usuario.email)
        self.responder('listar_gt.html', {'grupos' : grupos})
    
    def exibir(self, sigla):
        '''Exibe um GT.'''
        g = GrupoDeTrabalho.query().filter(GrupoDeTrabalho.sigla == sigla).get()
        if g:
            self.responder('gt.html', {'grupo' : g})
        else:
            self.erro_404()
        
        
